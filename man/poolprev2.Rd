% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/poolprev2.R
\name{poolprev2}
\alias{poolprev2}
\title{Estimate prevalence}
\usage{
poolprev2(
  data,
  method = "GP",
  spec = 0.995,
  prior = NULL,
  return.par = FALSE,
  return.stanfit = FALSE,
  ...
)
}
\arguments{
\item{data}{Datasets with the following variables:

\itemize{
\item time. Time (should be numeric)
\item pop. Population name (if missing, it assumes an unique population to analyse)
\item pool.size. Pool size (number of samples by pool)
\item n.pools. Number of pools
\item n.pos.pools. Number of positive pools.
}}

\item{method}{Method used to analyse data (timepoint or GP)}

\item{spec}{Test specificity}

\item{prior}{list of values for prior hyperparameters.}

\item{return.par}{a logical indicating whether to return GP parameter estimates.}

\item{return.stanfit}{a logical indicating whether to return the stan model.}

\item{...}{Arguments passed to \code{rstan::sampling} (e.g. iter, chains). If there are divergences,
add \code{control=list(adapt_delta=0.99)}.}
}
\value{
An object of class \code{stanfit} returned by \code{rstan::sampling}
}
\description{
Estimate prevalence from pooled test results assuming a fixed prevalence parameter for each time point.
}
\details{
details
}
\examples{
#Example 1
#load data
data(epipool_data1)

#run model with method assuming a prevalence parameter every week
out_timepoint = poolprev2(epipool_data1[[1]], method="timepoint", return.par=TRUE,return.stanfit=FALSE) #takes a few seconds
#run model with Gaussian process
out_GP = poolprev2(epipool_data1[[1]], method="GP", return.par=TRUE,return.stanfit=FALSE) #can take a few minutes

#plot
library(ggplot2)
library(dplyr)
dplyr::left_join(epipool_data1[[1]],
          rbind(out_timepoint$prev \%>\% dplyr::mutate(method="timepoint"),
                out_GP$prev \%>\% dplyr::mutate(method="GP")),
          by="time") \%>\%
  ggplot(aes(x=time))+
  geom_ribbon(aes(ymin=lwr,ymax=upr),fill="black",alpha=0.1)+
  geom_line(aes(y=mean),col="black",size=0.8)+
  geom_point(aes(y=mean),col="black",size=2)+
  geom_point(aes(y=prev),col="red",size=2) +
  facet_grid(.~method) +
  theme_bw() +
  scale_y_continuous(name="Prevalence", labels = scales::percent)

#Example 2: estimate the prevalence of two populations
#load data
data(epipool_data2)
data(epipool_data3)
data = rbind(epipool_data2[[1]] \%>\% dplyr::mutate(pop="pop1"),
            epipool_data3[[1]] \%>\% dplyr::mutate(pop="pop2"))

#run model with GP
out_timepoint = poolprev2(data, method="timepoint", return.par=TRUE) #takes a few seconds
out_GP1 = poolprev2(data, method="GP", return.par=TRUE) #can take a few minutes
out_GP2 = poolprev2(data, method="GP",prior=list(lengthscale=c(0,1),sd_GP=c(0,1)),
                     return.par=TRUE) #can take a few minutes

#plot prevalence
library(ggplot2)
left_join(data,
          rbind(out_timepoint$prev \%>\% dplyr::mutate(method="timepoint"),
                out_GP1$prev \%>\% dplyr::mutate(method="GP"),
                out_GP2$prev \%>\% dplyr::mutate(method="GP with smaller lengthscale/sd priors")), by=c("time","pop")) \%>\%
ggplot(aes(x=time))+
geom_ribbon(aes(ymin=lwr,ymax=upr),fill="black",alpha=0.1)+
geom_line(aes(y=mean),col="black",size=0.8)+
geom_point(aes(y=mean),col="black",size=2)+
geom_point(aes(y=prev),col="red",size=2) +
facet_grid(method~pop) +
theme_bw() +
scale_y_continuous(name="Prevalence", labels = scales::percent)

#compare parameter estimates
print(out_timepoint$par)
print(out_GP1$par)
print(out_GP2$par)
}
